generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------- User model and relations -----------------
model User {
  id                String            @id @default(uuid()) @db.Uuid
  name              String
  email             String            @unique
  password          String
  role              Role              @default(CLIENT)
  is_active         Boolean           @default(false)
  verification_code VerificationCode?
  addresses         Address[]

  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  deleted_at        DateTime?

  @@map("users")
}

model VerificationCode {
  id         String   @id @default(uuid()) @db.Uuid
  code       String
  user_id    String   @unique @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("verification_codes")
}

enum Role {
  ADMIN
  CLIENT
}

model Address {
  id         String   @id @default(uuid()) @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    String   @unique @db.Uuid
  state      String
  city       String
  street     String
  number     String
  cep        String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("addresses")
}

// ----------------- Editorial model -----------------
model Editorial {
  id           String    @id @default(uuid()) @db.Uuid
  name         String
  phone_number String
  books        Book[]

  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  @@map("editorials")
}

// ----------------- Book model -----------------
model Book {
  id           String     @id @default(uuid()) @db.Uuid
  title        String
  description  String
  image        String
  author       String
  editorial    Editorial  @relation(fields: [editorial_id], references: [id])
  editorial_id String     @db.Uuid
  price        Float
  inventory    Int
  categories   Category[]
  finishing    Finishing

  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  @@map("books")
}

enum Finishing {
  HARDCOVER
  PAPERBACK
  EBOOK
}

enum Category {
  FICTION
  SCIENCE_FICTION
  MYSTERY
  THRILLER
  ROMANCE
  HORROR
}
